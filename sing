#!/bin/sh

# basic utils
info() {
    echo "$@";
}
die() {
    echo "$@" >&2;
    exit 1
}
escape() {
    echo "$1" | sed 's/\([\.\$\*]\)/\\\1/g'
}
has() {
    local item=$1
    shift
    echo " $@ " | grep -q " $(escape $item) "
}

# git queries
local_branches() {
    git branch --no-color | sed 's/^[* ] //'
}
current_branch() {
    git branch --no-color | grep '^\* ' | grep -v 'no branch' | sed 's/^* //g'
}

# git commands

# checkout, rebase, merge all exit with 0 if they're applied to the current branch,
# so no need to explicitly check for that.
# if they exit with something else better abort right then and there.
checkout() {
    git checkout "$1" || die
}
rebase() {
    git rebase "$@" || die
}
merge() {
    git merge "$@" || die
}

# let the user resolve it if something goes wrong here.
archive() {
    BRANCH="$1"
    git tag "archive/$BRANCH" "$BRANCH" || die
}
delete() {
    git branch -D "$1" || die
}

branch() {
    NEW="$1"

    # git will fail fast if NEW already exists
    if test "$NEW" = "$(current_branch)" || has $NEW $(local_branches); then
        info "$NEW already exits, not branching"
    else
        git branch "$@" || die
    fi
}

# git-svn specific commands
svn_rebase() {
    info "git svn rebase $@"
    git svn rebase "$@" || die
}
svn_dcommit() {
    info "git svn dcommit"
    git svn dcommit --interactive || die
}

# sing subcommands
cmd_update() {
    # save the initial branch to switch back to it after updating MASTER
    INITIAL="$(current_branch)"

    # 'pull' changes from SVN into MASTER
    checkout "$MASTER"
    svn_rebase

    # then get them into the initial branch too if it wasnt MASTER
    if test "$INITIAL" != "$MASTER"; then
        # simply merging MASTER into INITIAL should cause headaches with
        # non-linear history once INITIAL is finished and dcommitted back to SVN,
        # so better consistently rebase everything.
        # by that some of the benefits of using git are lost but
        # having cheap and local branches is still preferable.
        rebase "$MASTER" "$INITIAL"
    fi
}

cmd_start() {
    # dont know what to start without a branchname
    require_args "$@"
    NEW="$1"

    # starting point is always MASTER
    checkout $MASTER

    # this does nothing if NEW already exists
    branch $NEW

    checkout $NEW
}

cmd_finish() {
    if test $# -eq 0; then
        COMPLETE="$(current_branch)"
    else
        COMPLETE="$1"
        checkout $COMPLETE
    fi

    cmd_update

    # 'push' to upstream
    svn_dcommit

    if test "$COMPLETE" != "$MASTER"; then
        # clean up and it's done
        cmd_cleanup $COMPLETE
    fi
}

cmd_cleanup() {
    if test $# -eq 0; then
        COMPLETE="$(current_branch)"
    fi

    if test "$COMPLETE" = "$MASTER"; then
        die "cannot cleanup $MASTER: it's the master branch"
    fi

    # cant delete the branch youre currently on
    checkout $MASTER

    archive $COMPLETE
    delete $COMPLETE
}

require_args() {
    if test $# -eq 0; then
        usage
        die
    fi
}

usage() {
    echo "usage: sing <subcommand>"
    echo "available subcommands: update - first rebases '$MASTER' on the SVN head revision, then the current branch on '$MASTER'"
    echo "                       start <branchname> - checkout <branchname> (if it doesn't exist branch it from the SVN head revision)"
    echo "                       finish [<branchname>] - merges <branchname> or the current branch into '$MASTER', then svn-dcommits from there. finally <branchname> is tagged as 'archive/<branchname>' and deleted"
}

main() {
    # this is what the branch is called that all the git-svn-specific commands are executed on
    MASTER="master"

    # basic sanity checks: sing requires a subcommand
    require_args "$@"

    # save first subcommand and remove it from the given arguments
    SUBCOMMAND="$1"
    shift

    # no need to go any further if user only wants info on usage
    if test "$SUBCOMMAND" = "usage" || test "$SUBCOMMAND" = "help"; then
        usage
        exit 0
    fi

    # must be in a git repo
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        die "error: Not a git repository"
    fi

    # check if this is a sing-enabled repo
    if ! has $MASTER $(local_branches); then
        die "error: branch $MASTER not found"
    fi

    # dont want to lose anything, so better abort straight away
    # there might be better solutions: prompt to stash?
    if ! git diff --no-ext-diff --ignore-submodules --quiet --exit-code; then
        die "error: working tree contains unstaged changes, aborting"
    fi
    if ! git diff-index HEAD --ignore-submodules --quiet --exit-code; then
        die "error: index contains uncommited changes, aborting"
    fi

    # delegate to subcommands
    cmd_$SUBCOMMAND "$@"

    # 127 exit code for unknown subcommand on my system (ubuntu 14.04)
    if test $? -eq 127; then
        usage
        die
    fi

    # if it gets here there should have been no errors:
    # all the subcommands are supposed to die (exit 1) if git returns an exit code != 0
    exit 0
}

main "$@"
